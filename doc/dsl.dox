
/*!
	\page dsl DSL for generation

	To simplify development with cfgfile was implemented cfgfile generator.

	cfgfile generator this is generator of C++ header file from
	declarative description of the configuration file. By configuration file
	assumes configuration file in cfgfile format. In generated header will
	be declared all necessary classes of data and configuration tags.

	For generation generator uses input configuration file in cfgfile format
	with following format:

	Let's say you need data class with one \c std::string field then you should write
	following configuration file, for example:

	\code{.unparsed}
	{forGeneration ifndefMacro
	  {namespace NamespaceName
	    {class NameOfTheClass
	      {base tagNoValue}

	      {tagScalar
	        {valueType std::string}
	        {name fieldWithString}
	      }
	    }
	  }
	}
	\endcode

	Each configuration file for generator must has one \c {forGeneration} tag and all
	nested tags must be defined in this tag. \c {forGeneration} tag require string for
	\c #ifndef directive (include guard). There you can use \c {namespace} tag for
	generation data classes and tags in the specified C++ namespace. Namespaces can
	be nested. To declare data class and tag you should use \c {class} tag.
	\c {class} tag can has \c {base} tag to define base class of the configuration tag.
	\c {base} tag can has following values: \c tagNoValue, \c tagScalar, \c tagScalarVector.
	\c tagNoValue is not mandatory in this case. To define field in data class you can
	use following tags: \c {tagScalar} for scalar tag, \c {tagNoValue} for no-value tag,
	\c {tagScalarVector} for vector of scalar values, \c {tag} for already defined tag,
	\c {tagVectorOfTags} for vector of already defined tags.

	\c {tagScalar}, \c {tagScalarVector} require C++ type defined in \c {valueType} tag.
	In this situation C++ type should be defined as string, that mean that, for
	example, \c unsigned \c int C++ type should be declared as \c "unsigned int".

	\c {tag} and \c {tagVectorOfTags} require class name with namespace if it is exist.
	Class name should be defined in \c {valueType} tag.
	Namespace and class name should be separated with \c ::

	All of field tags must have \c {name} tag with name of the field as value. If
	\c {base} defined with \c tagScalar or \c tagScalarVector then \c {valueType} and \c {name}
	must be defined. \c {base \c tagNoValue} is not necessary, if \c {base} is not defined
	then \c tagNoValue will be used as base class.

	Fields can have \c {required} tag to mark field as required.

	All of field tags can have \c {minMaxConstraint} or \c {oneOfConstraint} to define
	constraint for the field's value. \c {minMaxConstraint} require two tags
	\c {min \c value} and \c {max \c value}, and \c {oneOfConstraint} require list of values.
	For example, \c {minMaxConstraint \c {min \c 0} \c {max \c 100}},
	\c {oneOfConstraint \c one \c two \c three}.

	\c {base} and fields can have \c {defaultValue} tag to specify default value.

	In the above example will be generated similar to the following header file.

	\code
	namespace NamespaceName {

	class NameOfTheClass {
	public:
	  c_tors();
	  ~d_tor();

	  //! \return fieldWithQString value.
	  const std::string & fieldWithString() const;
	  //! Set fieldWithString value.
	  void set_fieldWithString( const std::string & value );
	}; // class NameOfTheClass


	//
	// tag_NameOfTheClass
	//

	template< typename Trait >
	class tag_NameOfTheClass
	  :  public cfgfile::tag_no_value_t< Trait >
	{
	public:
	  c_tors();
	  ~d_tor();

	  //! \return Configuration.
	  NameOfTheClass get_cfg() const;
	}; // class tag_NameOfTheClass

	} // namespace NamespaceName
	\endcode

	Additionally you can use custom data structures and tags in the generator.
	For this you can use \c {globalInclude \c string} and \c {relativeInclude \c string}
	tags. When using such includes in C++ code will be added corresponding
	include directives. And checking of classes' and namespaces' names will be
	turned off. And one more restriction is that that class's name for tag
	must be equal to \c tag_ \c + \c Name, i.e. if data structure names \c Data then class for
	tag must be named \c tag_Data and be placed in the same namespace as \c Data class/
	structure.
*/
